---
- name: Ensure Docker is installed
  hosts: all
  remote_user: ec2-user
  gather_facts: false
  become: true
  tasks:
    - name: Install Docker
      yum: name=docker

    - name: Ensure docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

- name: Initialize Swarm Mode
  hosts: manager-leader
  remote_user: ec2-user
  gather_facts: false
  become: true
  tasks:
    - shell: "docker info | grep 'Swarm' | awk -F'Swarm: ' '{print $NF}'"
      register: swarm_mode

    - name: Swarm init
      command: docker swarm init --advertise-addr {{private_ip}}
      when: swarm_mode.stdout == "inactive"

    - name: Master token
      command: docker swarm join-token manager -q
      when: swarm_mode.stdout == "active"
      register: master_token

    - shell: "docker network ls | grep service -c | { grep -v grep || true; }"
      register: overlay_network_created

    - name: Create service overlay network
      command: docker network create --driver overlay --subnet 10.0.0.0/16 service
      when: overlay_network_created.stdout = "0"

- name: Join Swarm Cluster
  hosts: manager-follower
  remote_user: ec2-user
  gather_facts: false
  become: true
  vars:
    token: "{{ hostvars[groups['manager-leader'][0]]['master_token']['stdout'] }}"
    master: "{{ hostvars[groups['manager-leader'][0]]['private_ip'] }}"
  tasks:
    - shell: "docker info | grep 'Swarm' | awk -F'Swarm: ' '{print $NF}'"
      register: swarm_mode

    - name: Join swarm cluster as manager
      command: docker swarm join --token {{ token }} {{ master }}:2377
      when: swarm_mode.stdout == "inactive"
      register: follower

    - name: Show join cluster results
      debug: var=follower.stdout

    - name: Show cluster errors
      debug: var=follower.stderr
